name: Deploy Surge Contracts

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (e.g., local, devnet, testnet, mainnet)'
        required: true
        type: choice
        options:
          - testnet
          - local
          - devnet
          - devnet-amplifier
          - devnet-verifiers
          - stagenet
          - mainnet
      json-rpc:
        description: 'JSON RPC URL where the program should be deployed'
        required: true
        type: string
      chain-id:
        description: 'Chain ID of the network (e.g., 1 for Ethereum Mainnet)'
        required: true
        type: string
      chain-name:
        description: 'Name of the chain (e.g., mainnet)'
        required: true
        type: string
      weth9-address:
        description: 'Address of the WETH9 contract on this chain'
        required: true
        type: string
      native-currency-label:
        description: 'Native currency label (e.g., ETH)'
        required: true
        type: string
        default: 'ETH'
      owner-address:
        description: 'Contract address that will own the deployed artifacts'
        required: true
        type: string
      explorer-url:
        description: 'Base URL of the block explorer for this chain (optional)'
        required: false
        type: string
      wss-rpc:
        description: 'WSS RPC Link (optional)'
        required: false
        type: string
      upgrade:
        description: 'Set to true to upgrade proxy implementation'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build

      - name: Run deployment script
        run: |
          # Construct the base command
          COMMAND="yarn start"

          # Add required parameters from secrets and inputs
          COMMAND="${COMMAND} --private-key '${{ secrets.PRIVATE_KEY }}'"
          COMMAND="${COMMAND} --env '${{ github.event.inputs.env }}'"
          COMMAND="${COMMAND} --json-rpc '${{ github.event.inputs.json-rpc }}'"
          COMMAND="${COMMAND} --chain-id '${{ github.event.inputs.chain-id }}'"
          COMMAND="${COMMAND} --chain-name '${{ github.event.inputs.chain-name }}'"
          COMMAND="${COMMAND} --weth9-address '${{ github.event.inputs.weth9-address }}'"
          COMMAND="${COMMAND} --native-currency-label '${{ github.event.inputs.native-currency-label }}'"
          COMMAND="${COMMAND} --owner-address '${{ github.event.inputs.owner-address }}'"

          # Add optional parameters if they were provided
          if [ -n "${{ github.event.inputs.explorer-url }}" ]; then
            COMMAND="${COMMAND} --explorer-url '${{ github.event.inputs.explorer-url }}'"
          fi
          if [ -n "${{ github.event.inputs.wss-rpc }}" ]; then
            COMMAND="${COMMAND} --wss-rpc '${{ github.event.inputs.wss-rpc }}'"
          fi
          if ${{ github.event.inputs.upgrade }}; then
            COMMAND="${COMMAND} --upgrade"
          fi

          # Execute the command
          echo "Running deployment script..."
          eval "$COMMAND"
        env:
          # Pass secrets and inputs as environment variables as a fallback for the script
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ENV: ${{ github.event.inputs.env }}
          JSON_RPC: ${{ github.event.inputs.json-rpc }}
          CHAIN_ID: ${{ github.event.inputs.chain-id }}
          CHAIN_NAME: ${{ github.event.inputs.chain-name }}
          WETH9_ADDRESS: ${{ github.event.inputs.weth9-address }}
          NATIVE_CURRENCY_LABEL: ${{ github.event.inputs.native-currency-label }}
          OWNER_ADDRESS: ${{ github.event.inputs.owner-address }}
          EXPLORER_URL: ${{ github.event.inputs.explorer-url }}
          WSS_RPC: ${{ github.event.inputs.wss-rpc }}

      # New step to install jq for JSON merging
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Commit and push configuration changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          CONFIG_FILE="config/${{ github.event.inputs.env }}.json"
          CHAIN_ID="${{ github.event.inputs.chain-id }}"
          NEW_BRANCH_NAME="deployed-on-${CHAIN_ID}"

          # Check if the config file was actually changed by the deployment script
          if git diff --quiet "$CONFIG_FILE"; then
            echo "No changes detected in $CONFIG_FILE. Skipping commit and push."
            exit 0
          fi

          echo "Changes detected in $CONFIG_FILE. Proceeding with commit and push."

          # Save the content of the modified config file from this run
          DEPLOYED_CONFIG_CONTENT=$(cat "$CONFIG_FILE")

          # Clean the working directory to prevent merge conflicts
          git reset --hard HEAD
          git clean -fdx

          # Fetch the latest state of the remote branch, if it exists
          git fetch origin "$NEW_BRANCH_NAME"

          # Checkout the target branch. It will be created from HEAD if it doesn't exist yet.
          git checkout -B "$NEW_BRANCH_NAME" "origin/$NEW_BRANCH_NAME" || git checkout -b "$NEW_BRANCH_NAME"

          # Read the existing content of the config file from the branch.
          # If the file doesn't exist, we start with an empty JSON object.
          if [ -f "$CONFIG_FILE" ]; then
            EXISTING_CONFIG_CONTENT=$(cat "$CONFIG_FILE")
          else
            EXISTING_CONFIG_CONTENT="{}"
          fi
          
          # Merge the new config with the existing one using 'jq'.
          # The '*' operator performs a deep merge of JSON objects.
          MERGED_CONFIG=$(echo "$EXISTING_CONFIG_CONTENT" | jq --argjson newContent "$DEPLOYED_CONFIG_CONTENT" '. * $newContent')

          # Now, write the merged content back to the file.
          echo "$MERGED_CONFIG" > "$CONFIG_FILE"

          # Stage only the config file to ensure only its changes are committed.
          git add "$CONFIG_FILE"

          # Commit the staged changes. The --amend option is used if the previous commit was done on this branch.
          git commit -m "chore: Deploy and update config for ${{ github.event.inputs.env }} (Chain ID: $CHAIN_ID)"

          # Push the branch. --set-upstream is used to create or update the tracking relationship.
          git push --force --set-upstream origin "$NEW_BRANCH_NAME"

          echo "Successfully pushed merged changes to branch $NEW_BRANCH_NAME."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
