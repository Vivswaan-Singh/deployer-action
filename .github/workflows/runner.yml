name: Deploy Surge Contracts

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (e.g., local, devnet, devnet-amplifier, devnet-verifiers, stagenet, testnet, mainnet)'
        required: true
        type: choice
        options:
          - local
          - devnet
          - devnet-amplifier
          - devnet-verifiers
          - stagenet
          - testnet
          - mainnet
      json-rpc:
        description: 'JSON RPC URL where the program should be deployed (e.g., https://mainnet.infura.io/v3/YOUR_PROJECT_ID)'
        required: true
        type: string
      weth9-address:
        description: 'Address of the WETH9 contract on this chain (e.g., 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)'
        required: true
        type: string
      native-currency-label:
        description: 'Native currency label, e.g. ETH'
        required: true
        type: string
        default: 'ETH'
      owner-address:
        description: 'Contract address that will own the deployed artifacts after the script runs (e.g., 0x...)'
        required: true
        type: string
      gas-price:
        description: 'The gas price to pay in GWEI for each transaction (optional)'
        required: false
        type: string
      confirmations:
        description: 'How many confirmations to wait for after each transaction (optional)'
        required: false
        type: string
        default: '2'
      upgrade:
        description: 'To upgrade proxy implementation'
        required: false
        type: boolean
        default: false


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16' # Ensure this matches your project's engine requirements (package.json specifies >=12.18.3)
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build project
        # Apply NODE_OPTIONS directly to the yarn build command
        run: yarn build

      - name: Debug file paths
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files in current directory:"
          ls -la
          echo "Listing files in config directory:"
          ls -la config/
          echo "Contents of config/testnet.json (if it exists):"
          cat config/testnet.json || echo "config/testnet.json not found or could not be read."

      - name: Run deployment script
        run: |
          # Construct the base command
          COMMAND="yarn start"

          # Add required parameters
          COMMAND="${COMMAND} --private-key '${{ secrets.PRIVATE_KEY }}'"
          COMMAND="${COMMAND} --env '${{ github.event.inputs.env }}'"
          COMMAND="${COMMAND} --json-rpc '${{ github.event.inputs.json-rpc }}'"
          COMMAND="${COMMAND} --weth9-address '${{ github.event.inputs.weth9-address }}'"
          COMMAND="${COMMAND} --native-currency-label '${{ github.event.inputs.native-currency-label }}'"
          COMMAND="${COMMAND} --owner-address '${{ github.event.inputs.owner-address }}'"

          # Add optional parameters if provided
          if [ -n "${{ github.event.inputs.gas-price }}" ]; then
            COMMAND="${COMMAND} --gas-price '${{ github.event.inputs.gas-price }}'"
          fi
          if [ -n "${{ github.event.inputs.confirmations }}" ]; then
            COMMAND="${COMMAND} --confirmations '${{ github.event.inputs.confirmations }}'"
          fi
          if ${{ github.event.inputs.upgrade }}; then
            COMMAND="${COMMAND} --upgrade"
          fi

          # Execute the command
          echo "Running command: $COMMAND"
          # Keep NODE_OPTIONS for the start command as a precaution
          eval "$COMMAND"
        env:
          # Pass inputs as environment variables as well, as your index.ts uses process.env
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ENV: ${{ github.event.inputs.env }}
          JSON_RPC: ${{ github.event.inputs.json-rpc }}
          WETH9_ADDRESS: ${{ github.event.inputs.weth9-address }}
          NATIVE_CURRENCY_LABEL: ${{ github.event.inputs.native-currency-label }}
          OWNER_ADDRESS: ${{ github.event.inputs.owner-address }}
          GAS_PRICE: ${{ github.event.inputs.gas-price }}
          CONFIRMATIONS: ${{ github.event.inputs.confirmations }}
          # RPC_URL is used in hasMinimumEthBalance, assuming it's the same as JSON_RPC
          RPC_URL: ${{ github.event.inputs.json-rpc }}

      - name: Show contents AFTER script runs (for debug)
        run: |
          echo "Contents of config/testnet.json (if it exists) AFTER script runs:"
          cat config/testnet.json || echo "config/testnet.json still not found or could not be read."

      - name: Commit and push changes to new branch
        run: |
          # Configure Git user
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add the specific file that was modified
          git add config/testnet.json

          if git diff-index --quiet HEAD --; then
              echo "No changes detected in config/testnet.json. Skipping commit and push."
          else
              # --- MODIFICATION STARTS HERE ---
              # Fetch network info and extract chainId
              # We need to get the chain ID from the RPC URL
              # This assumes you have jq installed on the runner, which is common in ubuntu-latest
              CHAIN_ID=$(node -e "
                const { JsonRpcProvider } = require('ethers');
                const { getNetworkInfo } = require('./dist/src/util'); // <--- CHANGED PATH HERE
                async function main() {
                  const provider = new JsonRpcProvider('${{ github.event.inputs.json-rpc }}');
                  const network = await provider.getNetwork();
                  console.log(network.chainId);
                }
                main().catch(console.error);
              ")
              
              NEW_BRANCH_NAME="deployment-update/${CHAIN_ID}"
              # --- MODIFICATION ENDS HERE ---

              echo "Creating and pushing to new branch: $NEW_BRANCH_NAME"

              # Create and switch to the new branch
              git checkout -b "$NEW_BRANCH_NAME"

              # Commit the changes
              git commit -m "chore: Deploy and update config/testnet.json for ${{ github.event.inputs.env }} (Chain ID: $CHAIN_ID)"

              # Push the new branch to origin
              git push origin "$NEW_BRANCH_NAME"
              echo "Successfully pushed changes to $NEW_BRANCH_NAME"

              # Optional: Output the new branch name for potential subsequent steps (e.g., creating a PR)
              echo "NEW_BRANCH_NAME=$NEW_BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create_and_push_branch # Add an ID to this step to access its outputs
